#include "./common.huff"

// [ top bottom ]
// constructor args encoding:
// { 32 bytes threshold }
// { 32 bytes ost from start of constructor args to signers array data (0x40) }
// { 32 bytes len(signers) }
// { 32 bytes first element of signers array -- address, right-aligned }

// - see what solidity does with the ost to array data in this case
  // - uhh it reverts if it's > 4294967296
  // - then uses it to find the array data in memory (adds it to the constructor args offset)

//[ signers_array_data_ost ]
template <throw_dst>
#define macro VALIDATE_SIGNERS_DATA_OST = takes(1) returns(0) {
  // TODO: unclear why solidity uses this specific value
  0x100000000 swap1 gt <throw_dst> jumpi
}

//[ threshold ]
template <throw_dst>
#define macro VALIDATE_THRESHOLD = takes(1) returns(0) {
  dup1 iszero swap1 0xff swap1 gt or <throw_dst> jumpi
}

/// EIP-712 Typehashes
// keccak256("EIP712Domain(uint256 chainId,uint256 deployBlock,address verifyingContract)");
#define macro PUSH_DOMSEP_TYPEHASH = takes(0) returns(1) { 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff }

#define macro DOMSEP = takes(0) returns(1) {
  PUSH_DOMSEP_TYPEHASH() 0x00 mstore
  chainid 0x20 mstore
  number 0x40 mstore
  address 0x60 mstore
  0x80 0x00 sha3
}

// codecopy ct_len + rt_len + 0x20 (ost to signers array) to 0x0
// mload and validate signers_ost (< 4294967296 ?)
// codecopy runtime ++ threshold at 0x0
// codecopy (start of constructor args + signers_ost -> codesize) to mem at rt size + 0x20
// mload threshold
// validate threshold
// validate signers array with memloads

// TODO: see solidity strict mode encoding
template <ct_len, rt_len>
#define macro CONSTRUCTOR = takes(0) returns(0) {
  // codecopy(dstOst, ost, len)

  // codecopy(0, signers_code_ost, 32)
  0x20 dup1 <ct_len> <rt_len> add add 0x00  //[ 0, signers_code_ost, 32 ]
  codecopy    //[]
  0x00 mload  //[ arr_data_ost ]
  dup1 VALIDATE_SIGNERS_DATA_OST<throw_dst>()

  // get domain separator -- done here so we can overwrite mem used for sha3
  DOMSEP() //[ domsep arr_data_ost ]

  //[ domsep arr_data_ost ]
  // codecopy(0, ct_len, rt_len + 32)
  <rt_len> 0x20 add <ct_len> 0x00 //[ 0, ct_len, rt_len+32, domsep, arr_data_ost ]
  codecopy //[ domsep arr_data_ost ]

  // mstore domsep after threshold
  <rt_len> 0x20 add mstore //[ arr_data_ost ]

  //[ arr_data_ost ]
  // codecopy(rt_len+64, ct_rt_len+arr_data_ost+32, codesize-ct_rt_len+arr_data_ost)
  <ct_len> <rt_len> add add dup1 codesize sub dup1 swap2 <rt_len> 0x40 add
  //[ rt_len+32, ct_rt_len+arr_data_ost, codesize-ct_rt_len+arr_data_ost '' ]
  codecopy

  // check that the length we used for copying signers is correct
  <rt_len> 0x40 add mload //[ signers_len inferred_len ]
  dup1 0x20 mul 0x20 add swap1 swap2 eq iszero throw_dst jumpi  //[ signers_len ]
  // sanity check on size of signers
  // TODO: unclear why solidity uses this specific value
  0x100000000 dup2 gt throw_dst jumpi // [signers_len]

  // check threshold
  <rt_len> mload dup1 VALIDATE_THRESHOLD<throw_dst>() //[ thresh signers_len ]

  // check signers.length >= threshold (~ threshold > len)
  gt throw_dst jumpi //[ ]

  /// Validate signers array

  // prev_signer := 0
  // ptr := rt_len+32
  // for(i := 0; i < signers_len; i++):
    // signer := mload(ptr)
    // if !(signer > prev_signer):
    //   revert
    // ptr += 32
  <rt_len> 0x40 add mload 0x20 mul //[ signers_len*32 ]
  <rt_len> 0x60 add //[ signers_ptr signers_len*32 ]
  0x00 dup1 //[ 00 00 signers_ptr signers_len*32 ]

  //[ ost prev_signer arr_ptr arr_len*32 ]
  check_next_signer:
    // check entry condition
    dup4 dup2 lt iszero endfor jumpi //[ ost prev_signer arr_ptr arr_len*32 ]
    dup1 0x20 add swap1 //[ ost ost+32 prev_signer arr_ptr arr_len*32 ]
    dup4 add //[ ost+arr_ptr ost+32 prev_signer arr_ptr arr_len*32 ]
    mload MASK_ADDR() //[ signer ost+32 prev_signer arr_ptr arr_len*32 ]
    swap2 dup3 //[ signer prev_signer ost+32 signer arr_ptr arr_len*32 ]
    gt iszero throw_dst jumpi //[ ost+32 signer arr_ptr arr_len*32 ]
    check_next_signer jump
  endfor:

  // return(0, rt_len+96+32*signers_len)
  <rt_len> 0x40 add mload //[ signers_len ]
  0x20 mul <rt_len> 0x60 add add 0x00 return

  throw_dst:
    0x00 dup1 revert
}
